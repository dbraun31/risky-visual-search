theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
q()
q()
## super useful docs on knitr
## https://yihui.org/knitr/options/#chunk_options
knitr::opts_knit$set(base.dir = '/home/dave/Dropbox (Lehigh University)/post_doc/professional/projects/gaita/ideation/structured/md/')
#knitr::opts_knit(base.dir = paste0(getwd(), '/../md/'))
knitr::opts_chunk$set(fig.path = 'figures/',
fig.align = 'center',
message = FALSE,
warning = FALSE,
echo = FALSE)
library(tidyverse)
library(latex2exp)
library(BH)
library(rstan)
library(gridExtra)
cost <- function(x, alpha = 2.5, lambda = 2){
if (x >= 0) {
return(-(x)^alpha)
}
return(lambda * (-x)^alpha)
}
d <- data.frame(x = seq(-1, 1, by = .001))
d$cost <- sapply(d$x, FUN = cost)
d %>%
ggplot(aes(x = -x, y = cost)) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_line(size = 1.5) +
annotate('text', x = -.8, y = 0.5, label = 'Less effort demand') +
annotate('text', x = .8, y = 0.5, label = 'More effort demand') +
annotate('text', x = -.7, y = -1.85, label = 'Increased response time window') +
annotate('text', x = .7, y = -1.85, label = 'Reduced response time window') +
labs(
x = 'Inverse Response Time Window',
y = 'Cost'
) +
ylim(-2,2) +
theme_bw() +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank())
data <- data.frame(risky1 = seq(-1, 1, by = 0.5),
risky2 = c(-0.5, 0, 0, 0, 0.5),
safe = c(-.75, -.25, 0, .25, .75))
data <- data[data$risky1 != 0,]
data <- do.call('rbind', replicate(1000, data, simplify = FALSE))
## parameters
alpha = 2.5
lambda = 2
## from tversky kahneman 1992
gamma = .877
phi = 2.5
## functions
p_choose_safe <- function(Vrisky, Vsafe) {
return(1 / (1 + exp(phi * (Vrisky - Vsafe))))
}
V <- function(x, p) {
out <- 0
for (outcome in x) {
out <- out + (pweight(p, gamma = gamma) * -cost(outcome, alpha = alpha, lambda = lambda))
}
return(out)
}
cost <- function(x, alpha, lambda){
if (x >= 0) {
return(-(x)^alpha)
}
return(lambda * (-x)^alpha)
}
pweight <- function(p, gamma) {
if (p == 1){
return(1)
}
return(p * gamma)
}
choose <- function(risky1, risky2, safe, mul = 1) {
Vrisky <- V(x = c(risky1, risky2)*mul, p = 0.5)
Vsafe <- V(x = safe*mul, p = 1)
return(p_choose_safe(Vrisky, Vsafe))
}
data$ssd_p <- mapply(choose, data$risky1, data$risky2, data$safe)
data$ssd <- rbinom(nrow(data), 1, data$ssd_p)
data %>%
mutate(framing = ifelse(risky1 > 0, 'Easier', 'Harder')) %>%
ggplot(aes(x = framing, y = ssd)) +
geom_jitter(alpha = .4, height = .05) +
geom_bar(stat = 'summary', fun.y = 'mean', fill = 'steelblue', alpha = .6) +
geom_errorbar(stat = 'summary', fun.y = 'sd', width = .5) +
labs(
x = 'Framing',
y = 'Proportion Selection Safe Deck'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
prospect_model
head(data)
fit <- stan(file = prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
help(stan)
fit <- stan(model_code = prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
fit <- stan(file = 'prospect_model',
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
fit <- stan(model_code = prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
prospect_model
fit <- sampling(model_code = prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
prospect_model
fit <- sampling(model_code = prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd))
fit <- stan(file = 'prospect_model.stan',
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
fit <- sampling(prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
fit <- sampling(prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1,
risky2 = data$risky2,
safe = data$safe,
choice = data$ssd),
warmup = 750,
iter = 1500,
chains = 3)
print(fit)
str(fiy)
str(fit)
result <- as.data.frame(fit)
head(result)
result$iteration <- 1:(nrow(result))
result %>%
select(-lp__) %>%
gather(parameter, estimate, lambda:phi) %>%
head()
result %>%
select(-lp__) %>%
gather(parameter, estimate, lambda:phi) %>%
ggplot(aes(x = iteration, y = estimate)) +
geom_line() +
facet_wrap(~parameter)
result %>%
select(-lp__) %>%
gather(parameter, estimate, lambda:phi) %>%
ggplot(aes(x = iteration, y = estimate)) +
geom_line() +
facet_wrap(~parameter, scales = 'free')
data <- data.frame(risky1 = seq(-1, 1, by = 0.5),
risky2 = c(-0.5, 0, 0, 0, 0.5),
safe = c(-.75, -.25, 0, .25, .75))
data <- data[data$risky1 != 0,]
data <- do.call('rbind', replicate(1000, data, simplify = FALSE))
## parameters
alpha = 2.5
lambda = 2
## from tversky kahneman 1992
gamma = .877
phi = 10
## functions
p_choose_safe <- function(Vrisky, Vsafe) {
return(1 / (1 + exp(phi * (Vrisky - Vsafe))))
}
V <- function(x, p) {
out <- 0
for (outcome in x) {
out <- out + (pweight(p, gamma = gamma) * -cost(outcome, alpha = alpha, lambda = lambda))
}
return(out)
}
cost <- function(x, alpha, lambda){
if (x >= 0) {
return(-(x)^alpha)
}
return(lambda * (-x)^alpha)
}
pweight <- function(p, gamma) {
if (p == 1){
return(1)
}
return(p * gamma)
}
choose <- function(risky1, risky2, safe, mul = 1) {
Vrisky <- V(x = c(risky1, risky2)*mul, p = 0.5)
Vsafe <- V(x = safe*mul, p = 1)
return(p_choose_safe(Vrisky, Vsafe))
}
data$ssd_p <- mapply(choose, data$risky1, data$risky2, data$safe)
data$ssd <- rbinom(nrow(data), 1, data$ssd_p)
data %>%
mutate(framing = ifelse(risky1 > 0, 'Easier', 'Harder')) %>%
ggplot(aes(x = framing, y = ssd)) +
geom_jitter(alpha = .4, height = .05) +
geom_bar(stat = 'summary', fun.y = 'mean', fill = 'steelblue', alpha = .6) +
geom_errorbar(stat = 'summary', fun.y = 'sd', width = .5) +
labs(
x = 'Framing',
y = 'Proportion Selection Safe Deck'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
data <- data.frame(risky1 = seq(-1, 1, by = 0.5),
risky2 = c(-0.5, 0, 0, 0, 0.5),
safe = c(-.75, -.25, 0, .25, .75))
data <- data[data$risky1 != 0,]
data <- do.call('rbind', replicate(1000, data, simplify = FALSE))
## parameters
alpha = 3.5
lambda = 2
## from tversky kahneman 1992
gamma = .877
phi = 10
## functions
p_choose_safe <- function(Vrisky, Vsafe) {
return(1 / (1 + exp(phi * (Vrisky - Vsafe))))
}
V <- function(x, p) {
out <- 0
for (outcome in x) {
out <- out + (pweight(p, gamma = gamma) * -cost(outcome, alpha = alpha, lambda = lambda))
}
return(out)
}
cost <- function(x, alpha, lambda){
if (x >= 0) {
return(-(x)^alpha)
}
return(lambda * (-x)^alpha)
}
pweight <- function(p, gamma) {
if (p == 1){
return(1)
}
return(p * gamma)
}
choose <- function(risky1, risky2, safe, mul = 1) {
Vrisky <- V(x = c(risky1, risky2)*mul, p = 0.5)
Vsafe <- V(x = safe*mul, p = 1)
return(p_choose_safe(Vrisky, Vsafe))
}
data$ssd_p <- mapply(choose, data$risky1, data$risky2, data$safe)
data$ssd <- rbinom(nrow(data), 1, data$ssd_p)
data %>%
mutate(framing = ifelse(risky1 > 0, 'Easier', 'Harder')) %>%
ggplot(aes(x = framing, y = ssd)) +
geom_jitter(alpha = .4, height = .05) +
geom_bar(stat = 'summary', fun.y = 'mean', fill = 'steelblue', alpha = .6) +
geom_errorbar(stat = 'summary', fun.y = 'sd', width = .5) +
labs(
x = 'Framing',
y = 'Proportion Selection Safe Deck'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
q()
q()
## super useful docs on knitr
## https://yihui.org/knitr/options/#chunk_options
knitr::opts_knit$set(base.dir = '/home/dave/Dropbox (Lehigh University)/post_doc/professional/projects/gaita/ideation/structured/md/')
#knitr::opts_knit(base.dir = paste0(getwd(), '/../md/'))
knitr::opts_chunk$set(fig.path = 'figures/',
fig.align = 'center',
message = FALSE,
warning = FALSE,
echo = FALSE)
options(mc.cores = parallel::detectCores())
library(tidyverse)
library(latex2exp)
library(BH)
library(rstan)
library(gridExtra)
cost <- function(x, alpha = 2.5, lambda = 2){
if (x >= 0) {
return(-(x)^alpha)
}
return(lambda * (-x)^alpha)
}
d <- data.frame(x = seq(-1, 1, by = .001))
d$cost <- sapply(d$x, FUN = cost)
d %>%
ggplot(aes(x = -x, y = cost)) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_line(size = 1.5) +
annotate('text', x = -.8, y = 0.5, label = 'Less effort demand') +
annotate('text', x = .8, y = 0.5, label = 'More effort demand') +
annotate('text', x = -.7, y = -1.85, label = 'Increased response time window') +
annotate('text', x = .7, y = -1.85, label = 'Reduced response time window') +
labs(
x = 'Inverse Response Time Window',
y = 'Cost'
) +
ylim(-2,2) +
theme_bw() +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank())
data <- data.frame(risky1 = seq(-1, 1, by = 0.5),
risky2 = c(-0.5, 0, 0, 0, 0.5),
safe = c(-0.75, -.25, 0, .25, 0.75))
data <- data[data$risky1 != 0,]
data <- do.call('rbind', replicate(1000, data, simplify = FALSE))
## parameters
alpha = 3
lambda = 2
gamma = 1
phi = .14
multiplier = 3
## functions
p_choose_safe <- function(Vrisky, Vsafe) {
return(1 / (1 + exp(-phi * (Vsafe - Vrisky))))
}
V <- function(x, p) {
out <- 0
for (outcome in x) {
out <- out + (pweight(p, gamma = gamma) * value(outcome, alpha = alpha, lambda = lambda))
}
return(out)
}
value <- function(x, alpha, lambda) {
if (x >= 0) {
return(x^alpha)
}
return(-lambda * (-x)^alpha)
}
# cost <- function(x, alpha, lambda){
#    if (x >= 0) {
#        return(-(x)^alpha)
#    }
#     return(lambda * (-x)^alpha)
# }
pweight <- function(p, gamma) {
if (p == 1){
return(1)
}
return(p * gamma)
}
choose <- function(risky1, risky2, safe, mul = multiplier) {
Vrisky <- V(x = c(risky1, risky2)*mul, p = 0.5)
Vsafe <- V(x = safe*mul, p = 1)
return(p_choose_safe(Vrisky, Vsafe))
}
data$ssd_p <- mapply(choose, data$risky1, data$risky2, data$safe)
data$ssd <- rbinom(nrow(data), 1, data$ssd_p)
data %>%
mutate(framing = ifelse(risky1 > 0, 'Easier', 'Harder')) %>%
ggplot(aes(x = framing, y = ssd)) +
geom_jitter(alpha = .4, height = .05) +
#geom_bar(stat = 'summary', fun.y = 'mean', fill = 'steelblue', alpha = .6) +
stat_summary(fun = 'mean', geom='bar', fill = 'steelblue', alpha = .6) +
#geom_errorbar(stat = 'summary', fun.y = 'sd', width = .5) +
labs(
x = 'Framing',
y = 'Proportion Selection Safe Deck'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
fit <- sampling(prospect_model,
data = list(N = nrow(data),
risky1 = data$risky1*multiplier,
risky2 = data$risky2*multiplier,
safe = data$safe*multiplier,
choice = data$ssd),
warmup = 750,
iter = 2000,
chains = 3)
print(fit)
result <- as.data.frame(fit)
result$iteration <- 1:(nrow(result))
result <- result %>%
select(-lp__) %>%
gather(parameter, estimate, lambda:gamma)
params <- c(
alpha = alpha,
lambda = lambda,
gamma = gamma,
phi = phi
)
params <- data.frame(parameter = names(params), ground_truth = params)
params <- result %>%
group_by(parameter) %>%
summarize(mean = mean(estimate), lower = quantile(estimate, probs = .025),
upper = quantile(estimate, probs = .975), sd = sd(estimate)) %>%
inner_join(params)
result %>%
ggplot(aes(x = iteration, y = estimate)) +
geom_line(alpha = .6) +
geom_hline(data = params, aes(yintercept = ground_truth),
linetype = 'dashed', color = 'steelblue', size = 2) +
facet_wrap(~parameter, scales = 'free') +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
strip.background = element_rect(color = 'black', fill = 'white'))
result %>%
ggplot(aes(x = estimate)) +
geom_histogram(fill = 'steelblue', alpha = .6) +
geom_vline(data = params, aes(xintercept = mean), linetype = 'dashed', color = 'yellow') +
geom_vline(data = params, aes(xintercept = lower), linetype = 'dashed', color = 'yellow') +
geom_vline(data = params, aes(xintercept = upper), linetype = 'dashed', color = 'yellow') +
geom_vline(data = params, aes(xintercept = ground_truth), linetype = 'dashed', color = 'green') +
labs(
x = 'Estimate',
y = 'Count'
) +
facet_wrap(~parameter, scales = 'free') +
theme_bw() +
theme(strip.background = element_rect(color = 'black', fill = 'white'))
result <- as.data.frame(fit)
result$iteration <- 1:(nrow(result))
head(result)
result <- as.data.frame(fit)
result$iteration <- 1:(nrow(result))
result <- result %>%
select(-lp__) %>%
gather(parameter, estimate, lambda:phi)
params <- c(
alpha = alpha,
lambda = lambda,
phi = phi
)
params <- data.frame(parameter = names(params), ground_truth = params)
params <- result %>%
group_by(parameter) %>%
summarize(mean = mean(estimate), lower = quantile(estimate, probs = .025),
upper = quantile(estimate, probs = .975), sd = sd(estimate)) %>%
inner_join(params)
result %>%
ggplot(aes(x = iteration, y = estimate)) +
geom_line(alpha = .6) +
geom_hline(data = params, aes(yintercept = ground_truth),
linetype = 'dashed', color = 'steelblue', size = 2) +
facet_wrap(~parameter, scales = 'free') +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
strip.background = element_rect(color = 'black', fill = 'white'))
result %>%
ggplot(aes(x = estimate)) +
geom_histogram(fill = 'steelblue', alpha = .6) +
geom_vline(data = params, aes(xintercept = mean), linetype = 'dashed', color = 'yellow') +
geom_vline(data = params, aes(xintercept = lower), linetype = 'dashed', color = 'yellow') +
geom_vline(data = params, aes(xintercept = upper), linetype = 'dashed', color = 'yellow') +
geom_vline(data = params, aes(xintercept = ground_truth), linetype = 'dashed', color = 'green') +
labs(
x = 'Estimate',
y = 'Count'
) +
facet_wrap(~parameter, scales = 'free') +
theme_bw() +
theme(strip.background = element_rect(color = 'black', fill = 'white'))
q()
q()
