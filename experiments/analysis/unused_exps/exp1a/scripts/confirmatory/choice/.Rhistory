geom_jitter(width = .03) +
geom_violin() +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_jitter(width = .03) +
geom_violin(fill = 'none') +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_jitter(width = .03) +
geom_violin(fill = NA) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_jitter(width = .03) +
geom_violin(fill = NA) +
geom_boxplot(data = m, aes(x = direction, y = ssd), fill = NA) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
m
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_jitter(width = .03) +
geom_violin(fill = NA) +
geom_boxplot(fill = NA) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_jitter(width = .03, alpha = .5) +
geom_violin(fill = NA) +
geom_boxplot(fill = NA) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_jitter(width = .03, alpha = .7) +
geom_violin(fill = NA) +
geom_boxplot(fill = NA) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .5) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw()
m1 <- ezANOVA(wid = subject, within = .(direction, magnitude), dv = ssd_, detailed = TRUE, data = ad)
library(ez)
ad <- d %>%
mutate(ssd = 1 - selectedRiskyDeck) %>%
group_by(subject, direction, magnitude) %>%
summarize(ssd_ = mean(ssd))
m1 <- ezANOVA(wid = subject, within = .(direction, magnitude), dv = ssd_, detailed = TRUE, data = ad)
cbind(m1$ANOVA, )
m1$ANOVA
cbind(m1$ANOVA, data.frame(n2p = m1$ANOVA$SSn / (m1$ANOVA$SSn + m1$ANOVA$SSd)))
q()
library(tidyverse)
d <- read.csv('../../../data/exp1_main.csv')
N <- length(unique(d$subject))
d$ssd = 1 - d$selectedRiskyDeck
head(d)
d %>%
group_by(subject, direction, magnitude) %>%
summarize(ssd_ = mean(ssd)) %>%
group_by(direction, magnitude) %>%
summarize(ssd = mean(ssd_), se = sd(ssd_) / sqrt(N)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_bar(stat = 'identity', aes(fill = magnitude), position = position_dodge(width= .9)) +
geom_errorbar(aes(ymin = ssd - se, ymax = ssd + se, group = magnitude), width = .5, position = position_dodge(width= .9)) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck',
caption = paste0('N = ', N, '. N needed is 50.')
) +
theme_bw()
m <- d %>%
group_by(subject, direction) %>%
summarize(ssd_ = mean(ssd)) %>%
group_by(direction) %>%
summarize(ssd = mean(ssd_))
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_line()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_line(aes(group = subject))
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
geom_violin()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7)
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7)
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_point() +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7)
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_jitter(width = .1) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7)
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_jitter(width = .05, alpha = .7) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7)
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_boxplot(fill = NA) +
geom_jitter(width = .05, alpha = .7) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
ylim(0,1) +
labs(
x = 'Direction',
y = 'Proportion Selection of Safe Option'
) +
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_boxplot(fill = NA) +
geom_jitter(width = .05, alpha = .7) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
ylim(0,1) +
labs(
x = 'Direction',
y = 'Proportion Selection of Safe Option'
) +
theme_bw()
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_boxplot(fill = NA) +
geom_jitter(width = .05, alpha = .7) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
ylim(0,1) +
labs(
x = 'Direction',
y = 'Proportion Selection of Safe Option'
) +
theme_bw()
q()
q()
q()
library(tidyverse)
exp <- str_extract(getwd(), 'exp\\d.?')
d <- read.csv(paste0('../../../data/', exp, '_main_raw.csv'))
N <- length(unique(d$subject))
d$ssd = 1 - d$selectedRiskyDeck
head(d)
N
exp <- str_extract(getwd(), 'exp\\d.?')
d <- read.csv(paste0('../../../data/', exp, '_main.csv'))
N <- length(unique(d$subject))
d$ssd = 1 - d$selectedRiskyDeck
head(d)
N
q()
library(tidyverse)
exp <- str_extract(getwd(), 'exp\\d[a-z]?')
d <- read.csv(paste0(here::here(), '/experiments/analysis/', exp, '/data/', exp, '_main.csv'))
N <- length(unique(d$subject))
head(d)
d %>%
group_by(subject, direction, magnitude) %>%
summarize(ssd_ = mean(ssd)) %>%
group_by(direction, magnitude) %>%
summarize(ssd = mean(ssd_), se = sd(ssd_) / sqrt(N)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_bar(stat = 'identity', aes(fill = magnitude), position = position_dodge(width= .9)) +
geom_errorbar(aes(ymin = ssd - se, ymax = ssd + se, group = magnitude), width = .5, position = position_dodge(width= .9)) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck',
caption = paste0('N = ', N, '. N needed is 50.')
) +
theme_bw()
m <- d %>%
group_by(subject, direction) %>%
summarize(ssd_ = mean(ssd)) %>%
group_by(direction) %>%
summarize(ssd = mean(ssd_))
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_boxplot(fill = NA) +
geom_jitter(width = .05, alpha = .7) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
ylim(0,1) +
labs(
x = 'Direction',
y = 'Proportion Selection of Safe Option'
) +
theme_bw()
ggsave('risky_visual_search.pdf', height = 5.5, width = 7.5)
ggsave('risy_visual_search.png', height = 720/96, width = 1280/96, dpi = 96, units = 'in')
library(ez)
ad <- d %>%
mutate(ssd = 1 - selectedRiskyDeck) %>%
group_by(subject, direction, magnitude) %>%
summarize(ssd_ = mean(ssd))
ezANOVA(wid = subject, within = .(direction, magnitude), dv = ssd_, detailed = TRUE, data = ad)
q()
library(tidyverse)
exp <- str_extract(getwd(), 'exp\\d[a-z]?')
d <- read.csv(paste0(here::here(), '/experiments/analysis/', exp, '/data/', exp, '_main.csv'))
N <- length(unique(d$subject))
head(d)
d %>%
group_by(subject, direction, magnitude) %>%
summarize(ssd_ = mean(ssd)) %>%
group_by(direction, magnitude) %>%
summarize(ssd = mean(ssd_), se = sd(ssd_) / sqrt(N)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_bar(stat = 'identity', aes(fill = magnitude), position = position_dodge(width= .9)) +
geom_errorbar(aes(ymin = ssd - se, ymax = ssd + se, group = magnitude), width = .5, position = position_dodge(width= .9)) +
ylim(0,1) +
labs(
x = 'Framing',
y = 'Proportion Selection of Safe Deck',
caption = paste0('N = ', N, '. N needed is 50.')
) +
theme_bw()
m <- d %>%
group_by(subject, direction) %>%
summarize(ssd_ = mean(ssd)) %>%
group_by(direction) %>%
summarize(ssd = mean(ssd_))
d %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd)) %>%
ggplot(aes(x = direction, y = ssd)) +
geom_violin(fill = 'steelblue', alpha = .2) +
geom_boxplot(fill = NA) +
geom_jitter(width = .05, alpha = .7) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .7) +
ylim(0,1) +
labs(
x = 'Direction',
y = 'Proportion Selection of Safe Option'
) +
theme_bw()
ggsave('risky_visual_search.pdf', height = 5.5, width = 7.5)
ggsave('risy_visual_search.png', height = 720/96, width = 1280/96, dpi = 96, units = 'in')
library(ez)
ad <- d %>%
mutate(ssd = 1 - selectedRiskyDeck) %>%
group_by(subject, direction, magnitude) %>%
summarize(ssd_ = mean(ssd))
ezANOVA(wid = subject, within = .(direction, magnitude), dv = ssd_, detailed = TRUE, data = ad)
library(lme4)
mm1 <- glmer(ssd ~ direction * magnitude + (1 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
mm1a <- glmer(ssd ~ direction * magnitude + (1 | subject) + (0 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
anova(mm1, mm1a)
summary(mm1a)
library(lme4)
mm1 <- glmer(ssd ~ direction + (1 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
mm1a <- glmer(ssd ~ direction  + (1 | subject) + (0 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
anova(mm1, mm1a)
summary(mm1a)
mm1b <- glmer(ssd ~ 1  + (1 | subject) + (0 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
anova(mm1a, mm1b)
summary(mm1a)
mm1 <- glmer(ssd ~ direction + (1 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
summary(mm1)
mm1a <- glmer(ssd ~ direction  + (1 | subject) + (0 + direction | subject), data = d, family = binomial(link = 'logit'), nAGQ = 1)
summary(mm1)
mm2 <- glmer(ssd ~ 1  + (1 + direction | subject) , data = d, family = binomial(link = 'logit'), nAGQ = 1)
anova(mm1, mm2)
summary(mm1)
exp(fixef(mm1))
exp(confint(mm1, method = 'Wald'))
mm2 <- glmer(ssd ~ 1  + (1 + direction | subject) , data = d, family = binomial(link = 'logit'), nAGQ = 1)
anova(mm1, mm2)
summary(mm1)
exp(fixef(mm1))
exp(confint(mm1, method = 'Wald'))
install.packages('merTools')
## prediction
## intervals from: https://stats.stackexchange.com/questions/147836/prediction-interval-for-lmer-mixed-effects-model-in-r
library(merTools)
test_data <- data.frame(direction = unique(d$direction))
preds <- predictInterval(mm1, newdata = test_data, n.sims = 999)
## prediction
## intervals from: https://stats.stackexchange.com/questions/147836/prediction-interval-for-lmer-mixed-effects-model-in-r
library(merTools)
test_data <- data.frame(direction = unique(d$direction), subject = unique(d$subject))
preds <- predictInterval(mm1, newdata = test_data, n.sims = 999)
head(pres)
head(preds)
preds
help(predictInterval)
test_data <- data.frame(direction = unique(d$direction))
preds <- predictInterval(mm1, which = 'fixed', newdata = test_data, n.sims = 999)
, subject = unique(d$subject)
, subject = unique(d$subject)
test_data <- data.frame(direction = unique(d$direction), subject = unique(d$subject))
preds <- predictInterval(mm1, which = 'fixed', newdata = test_data, n.sims = 999)
preds
test_data <- expand.grid(direction = unique(d$direction), subject = unique(d$subject))
preds <- predictInterval(mm1, which = 'fixed', newdata = test_data, n.sims = 999)
preds
easyPredCI <- function(model,newdata=NULL,alpha=0.05) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link function
linkinv <- family(model)$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(conf.low=pred0-crit*pred.se,
conf.high=pred0+crit*pred.se))
}
## prediction
## intervals from: https://stats.stackexchange.com/questions/147836/prediction-interval-for-lmer-mixed-effects-model-in-r
## dunno how to only get population-level prediction intervals from ^
#library(merTools)
test_data <- expand.grid(direction = unique(d$direction), subject = unique(d$subject))
preds <- predict(mm1, re.form=NA, newdata = test_data, type='response')
preds_ci <- easyPredCI(mm1, newdata = test_data)
preds_ci
easyPredCI <- function(model,newdata=NULL,alpha=0.05) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link function
linkinv <- family(model)$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(conf.low=pred0-crit*pred.se,
conf.high=pred0+crit*pred.se))
}
## prediction
## intervals from: https://stats.stackexchange.com/questions/147836/prediction-interval-for-lmer-mixed-effects-model-in-r
## dunno how to only get population-level prediction intervals from ^
#library(merTools)
test_data <- expand.grid(direction = unique(d$direction))
preds <- predict(mm1, re.form=NA, newdata = test_data, type='response')
preds_ci <- easyPredCI(mm1, newdata = test_data)
preds_ci
easyPredCI <- function(model,newdata=NULL,alpha=0.05) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link function
linkinv <- family(model)$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(conf.low=pred0-crit*pred.se,
conf.high=pred0+crit*pred.se))
}
## prediction
## intervals from: https://stats.stackexchange.com/questions/147836/prediction-interval-for-lmer-mixed-effects-model-in-r
## dunno how to only get population-level prediction intervals from ^
#library(merTools)
test_data <- expand.grid(direction = unique(d$direction))
test_data$proba <- predict(mm1, re.form=NA, newdata = test_data, type='response')
test_data <- cbind(test_data, easyPredCI(mm1, newdata = test_data))
test_data
easyPredCI <- function(model,newdata=NULL,alpha=0.05) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link function
linkinv <- family(model)$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(conf.low=pred0-crit*pred.se,
conf.high=pred0+crit*pred.se))
}
## prediction
## intervals from: https://stats.stackexchange.com/questions/147836/prediction-interval-for-lmer-mixed-effects-model-in-r
## dunno how to only get population-level prediction intervals from ^
#library(merTools)
test_data <- expand.grid(direction = unique(d$direction))
test_data$proba <- predict(mm1, re.form=NA, newdata = test_data, type='response')
test_data <- cbind(test_data, easyPredCI(mm1, newdata = test_data))
test_data %>%
ggplot(aes(x = direction, y = proba)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .5)
test_data %>%
ggplot(aes(x = direction, y = proba)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .5) %>%
ylim(0, 1)
test_data %>%
ggplot(aes(x = direction, y = proba)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .5) +
ylim(0, 1)
test_data %>%
ggplot(aes(x = direction, y = proba)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .5) +
ylim(0, 1) +
labs(
x = 'Direction',
y = 'Probability of Selecting Safe Deck'
) +
theme_bw()
q()
