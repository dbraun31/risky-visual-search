}
survey <- survey %>%
mutate(question = Vectorize(parse_question)(question)) %>%
mutate(numeric_final = ifelse(question %in% reverse_items, 6-numeric, numeric)) %>%
arrange(subject) %>%
select(-response, -numeric) %>%
rename(response = numeric_final)
d <- survey %>%
filter(!is.na(response)) %>%
group_by(subject) %>%
summarize(cog_need = mean(response)) %>%
right_join(d)
sp <- d %>%
group_by(subject) %>%
summarize(ssd = mean(ssd), search_rt = mean(search_rt), error = mean(error))
sp %>%
ggplot(aes(x = search_rt, y = error, label = subject)) +
geom_point(aes(color = ssd)) +
geom_smooth(method='lm') +
scale_color_distiller() +
labs(
x = 'Mean Visual Search Response Time (ms)',
y = 'Mean Error Rate',
color = 'Proportion Selection \nof Safe Deck'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
cor.test(sp$search_rt, sp$error)
sp$search_rt_c <- scale(sp$search_rt)[,1]
sp$error_c <- scale(sp$error)[,1]
min(sp$search_rt_c)
min(sp$error_c)
sp <- sp %>%
mutate(performance = sqrt((-2 - error_c)^2 + (-2 - search_rt_c)^2))
sp$performance <- -sp$performance
sp %>%
ggplot(aes(x = reorder(subject, performance), y = performance)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_blank())
best <- sp %>%
arrange(-performance) %>%
select(subject, performance) %>%
slice_head(n = 10) %>%
select(subject)
best <- best$subject
sp$best <- ifelse(sp$subject %in% best, 'Best', 'Other')
sp %>%
ggplot(aes(x = search_rt, y = error, label = subject)) +
geom_point(aes(color = best)) +
geom_smooth(method='lm') +
scale_color_npg() +
labs(
title = 'Validating the Performance Metric',
x = 'Mean Visual Search Response Time (ms)',
y = 'Mean Error Rate',
color = 'Performance'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
sp$performance <- scale(sp$performance)
d <- sp %>%
select(subject, performance) %>%
inner_join(d)
library(lme4)
library(car)
d$delay_e <- ifelse(d$delay == 'Enforced', -0.5, 0.5)
d$direction_e <- ifelse(d$direction == 'Easier', -0.5, 0.5)
d$n_stimuli_lag_c <- scale(d$n_stimuli_lag)[,1]
d$magnitude_e <- ifelse(d$magnitude == 'Moderate', -0.5, 0.5)
d$trial_c <- ifelse(d$delay == 'Enforced',
scale(d[d$delay=='Enforced',]$trial)[,1],
scale(d[d$delay == 'Not Enforced',]$trial)[,1])
d <- d[!is.na(d$n_stimuli_lag),]
#
# m1 <- glmer(ssd ~ direction_e * delay_e * performance +
#                 (1 + direction_e * delay_e | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
#
# m2 <- glmer(ssd ~ direction_e * delay_e * performance +
#                 (1 | subject) +
#                 (0 + direction_e * delay_e | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
#
# m3 <- glmer(ssd ~ direction_e * delay_e * performance +
#                 (1 | subject) +
#                 (0 + direction_e + delay_e | subject) +
#                 (0 + direction_e:delay_e | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
#
# m4 <- glmer(ssd ~ direction_e * delay_e * performance +
#                 (1 | subject) +
#                 (0 + direction_e + delay_e | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
#
# m5 <- glmer(ssd ~ direction_e * delay_e * performance +
#                 (1 | subject) +
#                 (0 + direction_e | subject) +
#                 (0 + delay_e | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
#
# m6 <- glmer(ssd ~ direction_e +
#                 trial_c +
#                  magnitude_e +
#                 delay_e +
#                 n_stimuli_lag_c +
#                 performance +
#                 (1 | subject) +
#                 (0 + magnitude_e | subject) +
#                 (0 + direction_e | subject) +
#                 (0 + trial_c | subject) +
#                 (0 + n_stimuli_lag_c | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
m7 <- glmer(ssd ~ direction_e +
trial_c +
magnitude_e +
delay_e +
n_stimuli_lag_c +
performance +
(1 | subject) +
(0 + direction_e | subject) +
(0 + trial_c | subject) +
(0 + magnitude_e | subject),
data = d, family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
# anova(m6, m7)
#
# m7 <- glmer(ssd ~ direction_e * delay_e * performance +
#                 (1 | subject),
#             data = d, family = binomial(link = 'logit'),
#             control = glmerControl(optimizer = 'bobyqa'),
#             nAGQ = 1)
#
# anova(m7, m6)
mm <- m7
m_reduced <- glmer(ssd ~ direction_e +
#magnitude_e +
n_stimuli_lag_c +
trial_c +
delay_e +
performance +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = d, family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(mm, m_reduced)
summary(mm)
exp(fixef(mm))
exp(confint(mm, method = 'Wald'))
library(ggExtra)
ci <- exp(confint(mm, method = 'Wald'))
levels <- c('Intercept', 'Framing', 'Trial Count', 'Outcome Magnitude',
'Delay', 'Search Stimuli (t-1)', 'Performance')
parameter <- factor(levels, levels = rev(levels))
pd <- data.frame(parameter = parameter, estimate = exp(fixef(mm)),
lower = ci[5:(nrow(ci)),1], upper = ci[5:(nrow(ci)),2])
pd %>%
ggplot(aes(x = parameter, y = estimate)) +
geom_hline(yintercept = 1, linetype = 'dotted') +
geom_point(size = 2) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .5) +
coord_flip() +
labs(
x = 'Parameter',
y = 'Odds of Selecting Safe Deck'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
r <- data.frame(mode = ranef(mm, condVar = TRUE))
r <- r[r$mode.term == 'direction_e',]
r$fixed <- fixef(mm)[2]
r$fixed_odds_ratio <- exp(r$fixed)
r$random_beta <- r$mode.condval + r$fixed
r$odds_ratio <- exp(r$random_beta)
r$sd_or <- exp(r$mode.condsd)
p1 <- r %>%
mutate(id = 1:(nrow(.))) %>%
ggplot(aes(x = reorder(id, odds_ratio), y = odds_ratio)) +
geom_hline(yintercept = 1, linetype = 'dotted') +
geom_hline(yintercept = unique(r$fixed_odds_ratio), linetype = 'dashed', color = 'blue') +
geom_point() +
ylim(0, 10) +
labs(
x = 'Participant',
y = 'Increase in Odds of Selecting Safe Deck when Outcomes are Harder than Reference'
) +
coord_flip() +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.y = element_blank())
ggMarginal(p2, margins = 'x', fill = 'steelblue', alpha = .7)
ggMarginal(p1, margins = 'x', fill = 'steelblue', alpha = .7)
e2 <- d[d$delay == 'Enforced',]
e2$cog_need_c <- scale(e2$cog_need)[,1]
e2 %>%
group_by(subject) %>%
summarize(cog_need = mean(cog_need_c), performance = -mean(performance)) %>%
ggplot(aes(x = performance, y = cog_need)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(
x = 'Standardized Task Performance Proficiency',
y = 'Standardized Need for Cognition'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank())
e2 <- d[d$delay == 'Enforced',]
e2$cog_need_c <- scale(e2$cog_need)[,1]
mm <- glmer(ssd ~ direction_e * cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
## test direction
print('Test main effect of direction')
m_direction <- glmer(ssd ~ direction_e:cog_need_c +
cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(m_direction, mm)
## test direction X cog need
print('Test two way interaction of direction and need for cognition')
m_direction_cogneed <- glmer(ssd ~ direction_e +
cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(mm, m_direction_cogneed)
summary(mm)
exp(fixef(mm))
exp(confint(mm, method = 'Wald'))
npg_blue <- pal_npg('nrc')(2)[2]
npg_red <- pal_npg('nrc')(2)[1]
e2 %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd), cog_need = mean(cog_need_c)) %>%
ggplot(aes(x = cog_need, y = ssd)) +
geom_point(aes(color = direction)) +
geom_smooth(method = 'lm', aes(color = direction, fill = direction)) +
labs(
x = 'Standardized Need for Cognition',
y = 'Proportion Selection of Safe Deck',
color = 'Direction',
fill = 'Direction'
) +
scale_color_manual(values = c(`Easier` = npg_blue, `Harder` = npg_red)) +
scale_fill_manual(values = c(`Easier` = npg_blue, `Harder` = npg_red)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
strip.background = element_rect(color = 'black', fill = 'white'))
print('Effect of NFC for easier than reference')
e2$is_easier <- ifelse(e2$direction == 'Easier', 0, 1)
m1 <- glmer(ssd ~ is_easier * cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
m_contrast <- glmer(ssd ~ is_easier  +
is_easier:cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(m1, m_contrast)
exp(fixef(m1))
exp(confint(m1, method = 'Wald'))
print('Effect of NFC for harder than reference')
e2$is_harder <- ifelse(e2$direction == 'Harder', 0, 1)
m1 <- glmer(ssd ~ is_harder * cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
m_contrast <- glmer(ssd ~ is_easier  +
is_harder:cog_need_c +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(m1, m_contrast)
exp(fixef(m1))
exp(confint(m1, method = 'Wald'))
print('Effect of framing for low NFC')
e2$cog_need_c_l <- e2$cog_need_c + 1
m1 <- glmer(ssd ~ direction_e * cog_need_c_l +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
m_contrast <- glmer(ssd ~ cog_need_c_l  +
direction_e:cog_need_c_l +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(m1, m_contrast)
exp(fixef(m1))
exp(confint(m1, method = 'Wald'))
print('Effect of framing for high NFC')
e2$cog_need_c_h <- e2$cog_need_c - 1
m1 <- glmer(ssd ~ direction_e * cog_need_c_h +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
m_contrast <- glmer(ssd ~ cog_need_c_h  +
direction_e:cog_need_c_h +
performance +
magnitude_e +
trial_c +
n_stimuli_lag_c +
(1 | subject) +
(0 + magnitude_e | subject) +
(0 + trial_c | subject) +
(0 + direction_e | subject),
data = e2,
family = binomial(link = 'logit'),
control = glmerControl(optimizer = 'bobyqa'),
nAGQ = 1)
anova(m1, m_contrast)
exp(fixef(m1))
exp(confint(m1, method = 'Wald'))
library(jtools)
easyPredCI <- function(model,newdata=NULL,alpha=0.05) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link function
linkinv <- family(model)$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(conf.low=pred0-crit*pred.se,
conf.high=pred0+crit*pred.se))
}
testdata <- expand.grid(cog_need_c = seq(-2, 2, by = .001), direction_e = c(-.5, .5),
performance = 0, trial_c = 0, n_stimuli_lag_c = 0, magnitude_e = 0)
testdata$proba <- predict(mm, newdata = testdata, re.form = NA, type = 'response')
testdata <- cbind(testdata, easyPredCI(mm, newdata = testdata))
preds <- testdata %>%
# group_by(cog_need_c, direction_e) %>%
# summarize(proba = mean(proba), conf.low = mean(conf.low), conf.high = mean(conf.high)) %>%
mutate(direction = ifelse(direction_e == -0.5, 'Easier', 'Harder'))
p3 <- e2 %>%
group_by(subject, direction) %>%
summarize(ssd = mean(ssd), cog_need_c = mean(cog_need_c)) %>%
ggplot(aes(x = cog_need_c, y = ssd)) +
geom_hline(yintercept = 0.5, linetype = 'dotted') +
geom_point(aes(color = direction)) +
geom_ribbon(data = preds,
aes(x = cog_need_c, ymin = conf.low, ymax = conf.high, fill = direction, y = proba),
alpha = .6) +
geom_line(data = preds,
aes(x = cog_need_c, y = proba, color = direction),
size = 1.5) +
labs(
x = 'Standardized Need for Cognition',
y = 'Probability of Selecting the Safe Deck',
color = 'Framing',
fill = 'Framing'
) +
scale_fill_manual(values = c(`Easier` = npg_blue, `Harder` = npg_red)) +
scale_color_manual(values = c(`Easier` = npg_blue, `Harder` = npg_red)) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = c(.15, .85))
ggMarginal(p3, groupFill = TRUE,
alpha = .6,
scale_fill_manual(values = `Easier` = npg_blue, `Harder` = npg_red))
ggMarginal(p3, groupFill = TRUE,
alpha = .6)
ggMarginal(p3, groupFill = TRUE,
alpha = .4)
ggMarginal(p3, groupFill = TRUE, type = 'densigram',
alpha = .4)
ggMarginal(p3, groupFill = TRUE, type = 'histogram',
alpha = .4)
head(d)
ggMarginal(p3, fill = 'steelblue',
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'densigram',
alpha = .6)
head(e2)
summary(factor(e2$direction))
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = 4,
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = 2,
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = 1,
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = .5,
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = .25,
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = .10,
alpha = .6)
ggMarginal(p3, fill = 'steelblue', type = 'histogram', binwidth = .10,
alpha = 1)
ggMarginal(p3, fill = pal_npg('nrc')(3)[3], type = 'histogram', binwidth = .10,
alpha = 1)
p3
q()
