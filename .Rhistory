nls
d <- data.frame(x = runif(1000, -10, 10))
sigmoid
logistic
k <- .14
x0 <- 2
sig <- function(x, x0, k) {
return(1 / (1 + exp(-k * (x - x0))))
}
d$y <- sig(d$x, x0, k)
head(d)
plot(d)
k <- 2
x0 <- 2
sig <- function(x, x0, k) {
return(1 / (1 + exp(-k * (x - x0))))
}
d$y <- sig(d$x, x0, k)
plot(d)
x0 <- .5
sig <- function(x, x0, k) {
return(1 / (1 + exp(-k * (x - x0))))
}
d$y <- sig(d$x, x0, k)
plot(d)
x0 <- .2
d$y <- sig(d$x, x0, k)
plot(d)
k <- .5
d$y <- sig(d$x, x0, k)
plot(d)
x0 <- 2
d$y <- sig(d$x, x0, k)
plot(d)
sig <- function(x, x0, k) {
return(1 / (1 + exp(-k * (x - x0))) + runif(length(x)))
}
d$y <- sig(d$x, x0, k)
plot(d)
sig <- function(x, x0, k) {
return(1 / (1 + exp(-k * (x - x0))) + runif(length(x), 0, .5))
}
d$y <- sig(d$x, x0, k)
plot(d)
sig <- function(x, x0, k) {
y <- 1 / (1 + exp(-k * (x - x0))) + runif(length(x), 0, .5)
y[y>1] <- 1
y[y<0] <- 0
return(y)
}
d$y <- sig(d$x, x0, k)
plot(d)
help(nls)
model <- y ~ (1 / (1 + exp(-k * (x - x0))))
model
fit <- nls(model,
data = d,
start = c(k = 4, 4))
fit <- nls(model,
data = d,
start = c(k = 4, x0 = 4))
summary(fit)
fit$m
str(fit)
help(nls)
logLik(fit)
fit$m
pars <- fit$m$getPars()
pars
k, x0 <- fit$m$getPars()
c(k, x0) <- fit$m$getPars()
d$proba <- 1 / (1 + exp(-k * (d$x - x0)))
head(d)
library(tidyverse)
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
nls
model <- y ~ (L / (1 + exp(-k * (x - x0)))) + b
fit <- nls(model,
data = d,
start = c(k = 4, x0 = 4, L = 4, b = 4))
fit$m$getPars()
L <- fit$m$getPars()[3]
b <- fit$m$getPars()[4]
k <- fit$m$getPars()[1]
x0 <- fit$m$getPars()[2]
L <- fit$m$getPars()[3]
b <- fit$m$getPars()[4]
d$proba <- L / (1 + exp(-k * (d$x - x0))) + b
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
fit$m$getPars()
model <- y ~ L / (1 + exp(-k * (x - x0))) + b
fit <- nls(model,
data = d,
start = c(k = 4, x0 = 4, L = 4, b = 4))
k <- fit$m$getPars()[1]
x0 <- fit$m$getPars()[2]
L <- fit$m$getPars()[3]
b <- fit$m$getPars()[4]
d$proba <- L / (1 + exp(-k * (d$x - x0))) + b
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
fit$m$getPars()
library(tidyverse)
## make data
d <- data.frame(x = runif(1000, -10, 10))
b1 <- .5
b0 <- 2
sig <- function(x, b0, b1, L, b) {
y <- 1 / (1 + exp(-1 * (b0 + b1*x + runif(length(x), 0, .5))))
return(y)
}
d$y <- sig(d$x, b0, b1)
plot(d)
model <- y ~ 1 / (1 + exp(-1 * (b0 + b1 * x)))
fit <- nls(model,
data = d,
start = c(b0 = 4, b1 = 4))
b0 <- fit$m$getPars()[1]
b1 <- fit$m$getPars()[2]
d$proba <- 1 / (1 + exp(-1 * (b0 + b1 * x)))
d$proba <- 1 / (1 + exp(-1 * (b0 + b1 * d$x)))
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
dev.off()
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
fit$m$getPars()
1 / (1 + exp(fit$m$getPars()))
d[d$x==0,]
d[d$x<.01 & d$x>-.01,]
d[d$x<.05 & d$x>-.05,]
1 / (1 + exp(-fit$m$getPars()))
exp(fit$m$getPars())
{
y <- 1 / (1 + exp(-1 * (b0 + b1*x + runif(length(x), 0, 2))))
return(y)
}
sig <- function(x, b0, b1, L, b) {
y <- 1 / (1 + exp(-1 * (b0 + b1*x + runif(length(x), 0, 2))))
return(y)
}
d$y <- sig(d$x, b0, b1)
plot(d)
model <- y ~ 1 / (1 + exp(-1 * (b0 + b1 * x)))
fit <- nls(model,
data = d,
start = c(b0 = 4, b1 = 4))
b0 <- fit$m$getPars()[1]
b1 <- fit$m$getPars()[2]
d$proba <- 1 / (1 + exp(-1 * (b0 + b1 * d$x)))
d %>%
ggplot(aes(x = x, y = y)) +
geom_point(alpha = .6) +
geom_line(aes(y = proba), color = 'blue', size = 1.5)
lm
lm.fit
q()
